#ifndef ICOMMAND_H
#define ICOMMAND_H

#include <list>

#include <QtGlobal>
#include <QAction>

enum MenuBarIndex {
	MENU_FILE,
	MENU_ADD,
	MENU_SET,
	MENU_TEST,
	MENU_CLOUD,
	MENU_LANGUAGE,
	MENU_HELP,
	MENU_MAX
};

enum MenuFileIndex {
	MENU_FILE_NEW,
	MENU_FILE_OPEN,
	MENU_FILE_SEPERATOR1,
	MENU_FILE_SAVE,
	MENU_FILE_SAVEAS,
	MENU_FILE_SEPERATOR2,
	MENU_FILE_PACK,
	MENU_FILE_SEPERATOR3,
	MENU_FILE_QUIT,
	MENU_FILE_MAX
};

enum MenuAddIndex {
	MENU_ADD_SCREEN,
	MENU_ADD_PROGRAM,
	MENU_ADD_SEPERATOR1,
	MENU_ADD_TEXT,
	MENU_ADD_IMAGE,
	MENU_ADD_FLASH_TEXT,
	MENU_ADD_CLOCK,
	MENU_ADD_CALENDAR,
	MENU_ADD_TIMER,
	MENU_ADD_HUMITURE,
	MENU_ADD_VARIABLE,
	MENU_ADD_WEB,
	MENU_ADD_MAX
};

enum MenuSetIndex {
	MENU_SET_DISCOVER,
	MENU_SET_SCREEN_ATTR,
	MENU_SET_COMM_PARA,
	MENU_SET_NET_PARA,
	MENU_SET_WIFI_PARA,
	MENU_SET_MAX
};

enum MenuTestIndex {
	MENU_TEST_TIME,
	MENU_TEST_BRIGHTNESS,
	MENU_TEST_INFO,
	MENU_TEST_ONOFF,
	MENU_TEST_SEPERATOR1,
	MENU_TEST_PREVIEW,
	MENU_TEST_SEND,
	MENU_TEST_EXPORT,
	MENU_TEST_MAX
};

enum MenuClusterIndex {
	MENU_CLOUD_CLUSTER,
};

enum MenuHelpIndex {
	MENU_HELP_UPDATE_AUTO,
	MENU_HELP_UPDATE_CHECK,
	MENU_HELP_FEEDBACK,
	MENU_HELP_ABOUT,
};

enum ToolBarIndex {
	TOOL_SCREEN,
	TOOL_PROGRAM,
	TOOL_SEPERATOR1,
	TOOL_TEXT,
	TOOL_IMAGE,
	TOOL_FLASH_TEXT,
	TOOL_CLOCK,
	TOOL_CALENDAR,
	TOOL_WEB,
	TOOL_TIMER,
	TOOL_SEPERATOR2,
	TOOL_REMOVE,
	TOOL_SEPERATOR3,
	TOOL_PREVIEW,
	TOOL_SEPERATOR4,
	TOOL_DISCOVER,
	TOOL_SEPERATOR5,
	TOOL_TIME,
	TOOL_BRIGHT,
	TOOL_ONOFF,
	TOOL_SEPERATOR6,
	TOOL_SEND,
	TOOL_CLUSTER,
	TOOL_EXPORT,
	TOOL_SEPERATOR7,
	TOOL_FEEDBACK
};

struct Command {
	int menuBarIndex = -1;
	int menuIndex = -1;
	int toolBarIndex = -1;
	QAction *action = nullptr;
};

typedef std::list<Command> Commands;

class ICommand
{
public:
	virtual Commands commands() = 0;
protected:
	virtual ~ICommand() = default;
};

#endif // ICOMMAND_H
